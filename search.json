[{"title":"LINUX笔记","url":"/2021/09/16/LINUX%E7%AC%94%E8%AE%B0/","content":""},{"title":"python笔记","url":"/2021/09/16/python%E7%AC%94%E8%AE%B0/","content":"python笔记printprint(*objects, sep=&#x27; &#x27;, end=&#x27;\\n&#x27;, file=sys.stdout, flush=False)\n\n\n\ntip: end 默认值 ‘\\n’，即默认换行。\nimport 与 from…import在 python 用 import 或者 from…import 来导入相应的模块。\n将整个模块(somemodule)导入，格式为：\nimport somemodule\n\n从某个模块中导入某个函数,格式为： \nfrom somemodule import somefunction\n\n从某个模块中导入多个函数,格式为： \nfrom somemodule import firstfunc, secondfunc, thirdfunc\n\n将某个模块中的全部函数导入，格式为：\nfrom somemodule import *\n\n标准数据类型\n不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；\n可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。tip：内置的 **type() **函数可以用来查询变量所指的对象类型。\n\n字符串切片str[开始索引:结束索引:步长]\n\ntip1：切片为左闭右开，开始索引默认值0，结束索引默认值字符串长度-1，步长默认值1；Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始\ntip2：加号 + 是字符串的连接符， 星号 ***** 表示复制当前字符串，与之结合的数字为复制的次数。\ntip3：反斜杠可以用来转义，使用r可以让反斜杠不发生转义。\ntip4：字符串不能改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。\n算数运算符\n\n\n运算符\n解释\n\n\n\n+ - *\n略\n\n\n/\n除以（带小数）\n\n\n//\n整除（不带小数，向下取整，即结果的整数部分）\n\n\n**\n幂\n\n\n%\n取模\n\n\n赋值运算符\n\n\n运算符\n描述\n实例\n\n\n\n=\n简单的赋值运算符\nc = a + b 将 a + b 的运算结果赋值为 c\n\n\n+=\n加法赋值运算符\nc += a 等效于 c = c + a\n\n\n-=\n减法赋值运算符\nc -= a 等效于 c = c - a\n\n\n*=\n乘法赋值运算符\nc *= a 等效于 c = c * a\n\n\n/=\n除法赋值运算符\nc /= a 等效于 c = c / a\n\n\n%=\n取模赋值运算符\nc %= a 等效于 c = c % a\n\n\n**=\n幂赋值运算符\nc **= a 等效于 c = c ** a\n\n\n//=\n取整除赋值运算符\nc //= a 等效于 c = c // a\n\n\n:=\n海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。\n在这个示例中，赋值表达式可以避免调用 len() 两次:if (n := len(a)) &gt; 10:    print(f&quot;List is too long (&#123;n&#125; elements, expected &lt;= 10)&quot;)\n\n\nPython位运算符按位运算符是把数字看作二进制来进行计算的。\n以a=60（0011 1100），b=12（0000 1101）为例\n\n\n\n运算符\n描述\n实例\n\n\n\n&amp;\n按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0\n(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100\n\n\n|\n按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。\n(a | b) 输出结果 61 ，二进制解释： 0011 1101\n\n\n^\n按位异或运算符：当两对应的二进位相异时，结果为1\n(a ^ b) 输出结果 49 ，二进制解释： 0011 0001\n\n\n~\n按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 -x-1\n(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。\n\n\n&lt;&lt;\n左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。\na &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000\n\n\n&gt;&gt;\n右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数，低位丢弃，高位补0。\na &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111\n\n\nPython逻辑运算符\n\n\n运算符\n逻辑表达式\n描述\n实例\n\n\n\nand\nx and y\n布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。\n(a and b) 返回 20。\n\n\nor\nx or y\n布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。\n(a or b) 返回 10。\n\n\nnot\nnot x\n布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。\nnot(a and b) 返回 False\n\n\n","categories":["笔记"],"tags":["python"]},{"title":"第一章 绪论","url":"/2021/09/16/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E7%BB%AA%E8%AE%BA/","content":"第一章 绪论1.1 数据库系统概述\n数据库技术产生于六十年代，是数据管理的有效技术，是计算机科学的重要分支。\n数据库技术是信息系统的核心和基础，它的出现极大地促进了计算机应用向各个行业的渗透。\n数据库已尽成为每个人生活中不可缺少的部分。\n\n1.1.1数据库的四个基本概念①数据（Data）定义：描述事物的符号记录称为数据。\n※ 数据的含义称为数据的语义，数据与其语义是不可分的。            在关系模型中数据通过型来给出数据的语义，而数据称为值\n※ 数据往往不是独立的，而是相互联系的\n※ 数据的分类：结构化数据，半结构化数据，非结构化数据\n②数据库（Database）数据库，即存放数据的仓库，是持久存储在计算机中、有组织的、可共享的大量数据集合。\n数据库技术本质是一种数据管理技术。\n数据管理具体指使用电子计算机对数据进行分类、组织、存储、检索和维护。\n※ 特点：        1）数据库中的数据按一定的数据模型组织、描述和存储        2）可以被各种用户共享        3）具有较小的冗余度（避免一个数据多个值）        4）较高的数据独立性（应用程序和数据库相互独立）        5）易于扩展        概括地讲，数据库数据具有永久存储、有组织和可共享三个基本特点。\n※ 数据库的基本操作：数据查询、数据插入、数据修改、数据删除（后三者合起来就是数据更新）\n③数据库管理系统（DBMS）数据库管理系统位于用户和操作系统之间的一层数据管理软件。\n数据库管理系统和操作系统一样是计算机的基础软件。也是一个大型复杂的软件系统。\n目的是科学地组织和存储数据、高效地获取和维护数据。\n常见的数据库管理系统有 ORACLE、MySQL、SQLServer、DB2\n※ 数据库管理系统的主要功能1）数据定义  2）数据组织、存储 和管理  3）数据操纵  4）数据库的事务管理和运行管理  5）数据库的建立和维护功能  6）其他功能\n※ 数据定义功能：提供数据定义语言（DDL），定义数据库中的数据对象\n※ 数据组织、存储和管理：分类组织、存储和管理各种数据，确定组织数据的文件结构和获取方式，实现数据之间的联系，提供多种存取方法提高存取效率\n※ 数据操纵功能：提供数据操纵语言（DML），实现对数据库的基本操作（查询、插入、删除和修改）、\n※ 数据库的事物管理和运行管理：数据库在建立、运行和维护时由数据库管理系统统一管理和控制，保证数据的安全性、完整性、多用户对数据的并发使用，发生故障后的系统修复\n※ 数据库的建立和维护功能：数据库初始数据的装载和转换，数据库转储、恢复功能，数据库的重组织，性能监视、分析等\n※ 其它功能：数据库管理系统与网络中其它软件系统的通信，数据库管理系统系统之间的数据转换，异构数据库之间的互访和互操作\n④数据库系统（DBS）数据库系统由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（DBA）组成。\n\n1.1.2数据管理技术的产生和发展数据管理技术的发展过程：①人工管理阶段（20世纪50年代中之间）\n②文件系统阶段（20世纪50年代末——60年代中）\n③数据库系统阶段（20世纪60年代末——现在）\n\n1.1.3数据库系统的特点1.数据结构化数据结构化是数据库的主要特征之一,也是数据库系统与文件系统的本质区别。\n所谓”整体“结构化是指数据库中的数据不再仅仅对某一个应用，而是面向整个组织或企业；不仅数据内部是结构化的，而是整体是结构化的，数据之间是具有联系的。\n2.数据的共享性高，冗余度低且易扩展数据共享可以大大减少数据冗余，节约存储空间。\n数据共享还能够避免数据之间的不相容性与不一致性。\n由于数据面向整个系统，是有结构的数据，不仅可以被多个应用，而且容易增加新的应用，这就亻吏得数据库系统弹性大，易于扩充，可以适应各种用户的要求。\n3.数据独立性高数据独立性是借助数据库管理数据的一个显著优点，它己成为数据库领域中一个常用术语和重要概念，包括数据的物理独立性和逻辑独立性。\n物理独立性是指用户的应用程序与数据库中数据的物理存储是相互独立的。也就是说，数据在数据库中怎样存储是由数据库管理系统管理的，用户程序不需要了解，应用程序要处理的只是数据的逻辑结构，这样当数据的物理存储改变时应用程序不用改变。\n逻辑独立性是指用户的应用程序与数据库的逻辑结构是相互独立的。也就是说，数据的逻辑结构改变时用户程序也可以不变。\n数据与程序的独立把数据的定义从程序中分离出去，加上存取数据的方法又由数据库管理系统负责提供，从而简化了应用程序的编制，大大减少了应用程序的维护和修改。\n4.数据由数据库管理系统统一管理和控制数据库管理系统提供的数据控制功能：        （1）数据的安全性(Security)保护        保护数据以防止不合法的使用造成的数据的泄密和破坏。        （2）数据的完整性(lntegrity)检查        保证数据的正确性、有效性和相容性。        （3）并发(Concurrency)控制        对多用户的并发操作加以控制和协调，防止相互干扰而得到错误的结果。        （4）数据库恢复(Recovery)        将数据库从错误状态恢复到某一已知的正确状态。\n\n1.2 数据模型\n数据模型是对现实世界数据特征的抽象\n通俗地讲数据模型就是现实世界的模拟\n数据模型应满足三方面要求：①能比较真实地模拟现实世界 ②容易为人所理解 ③便于在计算机上实现\n数据模型是数据库系统的核心和基础，是数据库技术的核心概念。\n数据模型是一种形式机制，用于数据建模，描述数据、数据之间的联系、数据的1吾又、数据上的操作和数据的完整性约束条件\n\n1.2.1 数据模型的分类概念模型：也称信息模型，它是按用户的观点来对数据和信息建模，用于数据库设计。\n逻辑模型：逻辑模型主要包括网状模型、层次模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型等。按计算机系统的观点对数据建模，用于DBMS实现。\n物理模型：：物理模型是对数据最底层的抽象，描述数据在系统内部的表示方式和存取方法，在磁盘或磁带上的存储方式和存取方法。\n※ 客观对象的抽象过程——两步抽象\n1）现实世界中的客观对象抽象为概念模型*（现实世界→信息世界）\n2）把概念模型转换为某一数据库管理系统支持的数据模型（信息世界→机器世界）\n\n1.2.2 概念模型概念模型用于信息世界的建模，是现实世界到信息世界的第一层抽象，是数据库设计人员进行数据库设计的有力工具，地是数据库设计人员和用户之间进行交流的语言，因此概念模型一方面应该具有较强的语义表达能力，能够方便、直接地表达应用中的各种语义知识，另一方面它还应该简单、清晰、易于用户理解。\n1.信息世界中的基本概念1）实体\n客观存在并可相互区别的事物称为实体\n2）属性\n实体所具有的某一特性称为属性\n※ 一个实体可以由若干个属性来刻画\n3）码\n唯一标识实体的属性称为码\n※ 每个实体的码不同\n※ 码是一种特别的属性\n4）实体型\n用实体名及其属性名集合来抽象和刻画同类实体称为实体型\n5）实体集\n同一类型实体的集合称为实体集\n6）联系\n现实世界中事物内部以及事物之间的联系在信息世界中反映为实体（型）内部的联系和实体（型）之间的联系。\n※ 实体内部的联系通常是指组成实体的各属性之间的联系\n※ 实体之间的联系通常是指不同实体集之间的联系\n※ 实体之间的联系有一对一、一对多和多对多等多种联系\n\n\n\n名词\n例子\n\n\n\n实体\n学生\n\n\n属性\n年龄，身高，体重\n\n\n码\n学号，身份证号\n\n\n实体型\n学生（年龄，身高，体重，学号）\n\n\n实体集\n全体学生\n\n\n实体内部的联系\n身份证和生日，性别有联系\n\n\n实体之间的联系\n同班同学之间有联系\n\n\n2. 概念模型的一种表示方法：实体—联系方法实体—联系方法（Entity-relationship，简称E-R方法或E-R模型）是一种广泛使用的概念模型，用于对现实世界建模\nE-R模型基于这样的认识：现实世界由一些称为实体的基本对象和这些对象之间的联系组成\n1.2.3 数据模型的组成要素1.数据结构描述数据库的组成对象，以及对象之间的联系，是对系统静态特征的描述\n2.数据操作对数据库中各种对象（型）的实例（值）允许执行的操作的集合，包括搡作及有关的操作规则\n数据操作的类型：查询和更新（包括插入、删除、修改）\n数据模型对操作的定义：操作的确切含义、操作符号、操作规则（如优先级）、实现操作的语言\n数据操作是对系统动态特征的描述\n3.完整性约束完整性约束是一组规则，保证数据的正确、有效和相容\n数据的完整性约束条件：\n​    ①一组完整性规则的集合\n​    ②完整性规则：给定的数据模型中数据及其联系所具有的制约和依存规则\n​    ③用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效和相容\n数据模型对完整性约束条件的定义：\n​    ①反映和规定必须遵守的基木的通用的完整性约束条件。\n​    ②提供定义完整性约束条件的机制，以反映具体应用所涉及的数据必须遵守的特定的语义约束条件。\n1.2.4 常见的数据模型层次模型、网状模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型\n1.2.5 层次模型层次模型是数据库系统中最早出现的数据模型\n层次模型是用树形结构来表示各种实体以及实体之间的联系\n1.层次模型的数据结构※ 满足下面两个条件的基本层次联系的集合为层次模型\n​    1．有且只有一个结点没有双亲结点，这个结点称为根结点\n​    2．根以外的其它结点有且只有一个双亲结点\n层次模型中的几个术语：根节点、双亲结点、兄弟结点、叶节点\n\n在层次模型中，每个结点表示一个记录类型，记录类型之间的联系用结点之间的连线（有向边）表示，这种联系是父子之间的一对多的联系。（所以层次数据库系统只能处理一对多的实体联系）\n层次模型的特点：\n\n​    结点的双亲是唯一的\n​    只能直接处理一对多的实体联系\n​    每个记录类型可以定义一个排序字段，也称为码字段\n​    任何记录值只有按其路径查看时，才能显出它的全部意义\n​    没有一个子女记录值能够脱离双亲记录值而独立存在\n\n\n2. 层次模型的数据操纵与完整性约束层次模型的数据操纵：查询、插入、删除、更新\n层次模型的完整性约束条件：\n\n无相应的双亲结点值就不能插入子女结点值\n\n如果删除双亲结点值，则相应的子女结点值也被同时删除\n\n更新操纵时，应更新所有相应记录，以保证数据的一致性\n\n\n3. 层次模型的优缺点优点：\n\n层次模型的数据结构比较简单清晰\n查询效率高，性能优于关系模型，不低于网状模型\n层次数据模型提供了良好的完整性支持\n\n缺点：\n\n结点之间的多对多联系表示不自燃\n对插入和删除操作的限制多，应用程序的编写比较复杂\n查询子女结点必须通过双亲结点\n层次命令趋于程序化\n\n1.2.6 网状模型网状数据库系统采用网状模型作为数据的组织方式\n1.网状模型的数据结构※ 满足下面两个条件的基本层次联系的集合：\n​    1.允许一个以上的结点无双亲\n​    2.一个结点可以有多于一个的双亲\n表示方法：\n​    实体型：用记录类型描述，每个结点表示一个记录类型（实体）\n​    属性：用字段描述，每个记录类型可包括若干个字段\n​    联系：用结点之间的连线表示记录类型（实体）之间的一对多的父子联系\n\n\n\n\n层次模型\n网状模型\n\n\n\n无双亲结点的结点个数\n一个\n多个\n\n\n一个结点最多有多少个双亲结点\n一个\n多个\n\n\n两个结点之间的联系\n一种\n多种\n\n\n网状模型可以更直接地描述现实世界\n层次模型实际上是网状模型的一个特例\n网状模型中子女结点与双亲结点的联系可以不唯一，要为每个联系命名，并指出与该联系有关的双亲记录和子女记录 。\n\n多对多联系在网状模型中的表示：用网状模型间接表示多对多联系\n​    方法：将多对多联系直接分解成一对多联系\n2.网状模型的操作与完整性约束网状数据库系统（如DBTG）对数据操纵加了一些限制，提供了一定的完整性约束\n\n码：唯一标识记录的数据项的集合 \n一个联系中双亲记录与子女记录之间是一对多联系\n支持双亲记录和子女记录之间某些约束条件 \n\n3. 网状模型的优缺点优点\n\n能够更为直接地描述现实世界，如一个结点可以有多个双亲\n具有良好的性能，存取效率较高\n\n缺点\n\n结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握\nDDL、DML语言复杂，用户不容易使用\n记录之间联系是通过存取路径实现的，用户必须了解系统结构的细节\n\n1.2.7 关系模型关系模型是主流的数据模型，具有坚实的数学基础，以及简洁的数据表示方式，并且支持非过程语言。\n关系数据库系统采用关系模型作为数据的组织方式。\n计算机厂商新推出的数据库管理系统几乎都支持关系模型 \n1.关系模型的数据结构关系模型只有一种数据结构——关系\n在用户观点下，关系模型中数据的逻辑结构是一张二维表，它由行和列组成\n\n\n\n学 号\n姓 名\n年 龄\n性 别\n系 名\n年 级\n\n\n\n2013004\n王小明\n19\n女\n社会学\n2013\n\n\n2013006\n黄大鹏\n20\n男\n商品学\n2013\n\n\n2013008\n张文斌\n18\n女\n法律\n2013\n\n\n…\n…\n…\n…\n…\n…\n\n\n一些术语：\n\n关系（Relation）：一个关系对应通常说的一张表，如上表。\n元组（Tuple）：表中的一行即为一个元组。\n属性（Attribute）：表中的一列即为一个属性，给每一个属性起一个名称即属性名，如上表中便有六个属性。\n主码（Key）：也称码键。表中的某个属性组，它可以唯一确定一个元组，如学号。\n域（Domain）:是一组具有相同数据类型的值的集合。属性的取值范围来自某个域。如性别这一属性的域就是（男，女）。\n分量：元组中的一个属性值。如王小明。\n关系模式：对关系的描述，一般表示为  *关系名（属性1，属性2，属性3，……，属性n）*\n\n如 学生（学号，姓名，年龄，性别，系名，年级）\n\n现实世界中的对象和对象之间的联系都用关系表示．\n关系模型要求关系必须是规范化的：关系的每个属性只能取原子值（不能再分的值），换句话说，表中不能包含子表\n下表就是不符合关系模型的，\n\n术语对比：\n\n\n\n关系术语\n一般表格的术语\n\n\n\n关系名\n表名\n\n\n关系模式\n表头（表格的描述）\n\n\n关系\n（一张）二维表\n\n\n元组\n记录或行\n\n\n属性\n列\n\n\n属性名\n列名\n\n\n属性值\n列值\n\n\n分量\n一条记录中的一个列值\n\n\n非规范关系\n表中有表（大表中嵌有小表）\n\n\n2.关系模型的数据操作与完整性约束数据操作是集合操作，操作对象和操作结果都是关系\n存取路径对用户隐蔽，用户只要指出“干什么”，不必详细说明“怎么干”\n关系的完整性约束条件包括三大类：实体完整性，参照完整性和用户定义的完整性。\n3.关系模型的优缺点优点\n\n建立在严格的数学概念的基础上\n\n概念单一\n\n实体和各类联系都用关系来表示\n对数据的检索结果也是关系\n\n\n关系模型的存取路径对用户透明\n\n具有更高的数据独立性，更好的安全保密性\n简化了程序员的工作和数据库开发建立的工作\n\n\n\n缺点\n\n存取路径对用户透明，查询效率往往不如格式化数据模型\n为提高性能，必须对用户的查询请求进行优化，增加了开发数据库管理系统的难度\n\n1.3 数据库系统的结构1.3.1  数据库系统模式的概念“型” 和“值” 的概念：\n\n型（Type）：对某一类数据的结构和属性的说明\n值（Value）：是型的一个具体赋值\n\n模式（schema）是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及型的描述，不涉及具体的值。模式的一个具体值称为模式的一个实例(instance)。同一个模式可以有很多实例。\n模式（Schema）\n\n数据库逻辑结构和特征的描述\n是型的描述，不涉及具体值\n反映的是数据的结构及其联系\n模式是相对稳定的\n\n实例（Instance）\n\n模式的一个具体值\n反映数据库某一时刻的状态\n同一个模式可以有很多实例\n实例随数据库中的数据的更新而变动\n\n1.3.2  数据库系统的三级模式结构数据库系统的三级模式结构是由外模式、模式和和内模式三级构成。\n\n1.模式模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。\n模式是数据库系统模式结构的中间层，既不涉及数据的物理存储细节和硬件环境，又与具体的应用程序、所使用的应用开发工具及高级程序设计语言无关。\n模式的定义包括：数据项的名字、类型、取值范围、数据之间的联系、数据有关的安全性和完整性要求\n2.外模式外模式也称子模式或用户模式，它是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图是与某一应用有关的数据的逻辑表示。\n介于模式与应用之间，是特定数据库用户的数据视图，是与某一具体应用相关的数据局部逻辑结构的描述\n理想地，所有的应用都建立在一个外模式上，但是实际上，DBMS都允许应用程序直接访问模式\n外模式的用途：① 保证数据库安全性的一个有力措施 ② 每个用户只能看见和访问所对应的外模式中的数据\n3.内模式内模式也称存储模式或物理模式，一个数据库只有一个内模式。它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。\n内模式是数据物理结构和存储方式的描述，定义数据在数据库内部的表示方式\n内模式到物理存储器的映射通常由操作系统实现\n1.3.3  数据库的二级映像功能与数据独立性三级模式是对数据的三个抽象级别\n二级映象在数据库管理系统内部实现这三个抽象层次的联系和转换\n1. 外模式-模式映像外模式-模式映像定义外面是与模式之间的对应关系\n每一个外模式都有一个对应的外模式-模式映像，建立外模式中的数据对象与模式中的数据对象之间的对应关系\n外模式-模式映像可以保证外模式的相对稳定性，为数据的逻辑独立性提供了保证\n保证数据的逻辑独立性：\n\n当模式改变时，数据库管理员对外模式／模式映象作相应改变，使外模式保持不变\n应用程序是依据数据的外模式编写的，应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性\n\n2. 模式-内模式映像模式-内模式映像定义数据全局逻辑结构与存储结构之间的对应关系\n模式-内模式映像可以保证模式，进而保证外模式的相对稳定性\n当数据的存储结构（内模式）改变时，数据库管理员可以修改模式一内模式映像，使得模式保持不变。这为数据的物理独立性提供了保证\n保证数据的物理独立性：\n\n当数据库的存储结构改变了（例如选用了另一种存储结构），数据库管理员修改模式／内模式映象，使模式保持不变。\n应用程序不受影响。保证了数据与程序的物理独立性，简称数据的物理独立性。\n\n数据库模式\n\n即全局逻辑结构是数据库的中心与关键 \n独立于数据库的其他层次 \n设计数据库模式结构时应首先确定数据库的逻辑模式\n\n数据库的内模式\n\n依赖于它的全局逻辑结构\n独立于数据库的用户视图，即外模式\n独立于具体的存储设备  \n将全局逻辑结构中所定义的数据结构及其联系按照一定的物理存储策略进行组织，以达到较好的时间与空间效率 \n\n数据库的外模式\n\n面向具体的应用程序\n定义在逻辑模式之上\n独立于存储模式和存储设备\n当应用需求发生较大变化，相应外模式不能满足其视图要求时，该外模式就得做相应改动 \n设计外模式时应充分考虑到应用的扩充性 \n\n特定的应用程序\n\n在外模式描述的数据结构上编制的\n依赖于特定的外模式\n与数据库的模式和存储结构独立\n不同的应用程序有时可以共用同一个外模式\n\n数据库的二级映像\n\n保证了数据库外模式的稳定性\n从底层保证了应用程序的稳定性，除非应用需求本身发生变化，否则应用程序一般不需要修改 \n\n※ 逻辑独立性由外模式-模式映像保证，物理独立性由模式-内模式映像保证\n数据与程序之间的独立性，使得数据的定义和描述可以从应用程序中分离出去 \n数据的存取由数据库管理系统管理：\n\n简化了应用程序的编制\n大大减少了应用程序的维护和修改 \n\n1.4 数据库系统的组成1.4.1硬件平台及数据库数据库系统对硬件资源的要求\n\n足够大的内存\n足够的大的磁盘或磁盘阵列等设备\n较高的通道能力，提高数据传送率\n\n1.4.2.软件数据库管理系统\n支持数据库管理系统运行的操作系统\n与数据库接口的高级语言及其编译系统\n以数据库管理系统为核心的应用开发工具\n为特定应用环境开发的数据库应用系统\n1.4.3.人员\n1.数据库管理员具体职责： \n1.决定数据库中的信息内容和结构\n2.决定数据库的存储结构和存取策略\n3.定义数据的安全性要求和完整性约束条件\n4.监控数据库的使用和运行                  周期性转储数据库                         数据文件                         日志文件                  系统故障恢复                  介质故障恢复                  监视审计文件\n5.数据库的改进和重组                  性能监控和调优                  定期对数据库进行重组织，以提高系统的性能                  需求增加和改变时，数据库须需要重构造\n2.系统分析员和数据库设计人员系统分析员 \n\n负责应用系统的需求分析和规范说明\n与用户及数据库管理员结合，确定系统的硬软件配置\n参与数据库系统的概要设计\n\n数据库设计人员\n\n参加用户需求调查和系统分析\n确定数据库中的数据\n设计数据库各级模式\n\n3.应用程序员计和编写应用系统的程序模块\n进行调试和安装\n4.最终用户用户是指最终用户（End User）。最终用户通过应用系统的用户接口使用数据库。 \n1）偶然用户\n\n不经常访问数据库，但每次访问数据库时往往需要不同的数据库信息 \n企业或组织机构的高中级管理人员\n\n2）简单用户\n\n主要工作是查询和更新数据库 \n银行的职员、机票预定人员、旅馆总台服务员\n\n3）复杂用户\n\n工程师、科学家、经济学家、科技工作者等\n直接使用数据库语言访问数据库，甚至能够基于数据库管理系统的应用程序接口编制自己的应用程序\n\n1.5 小结1.数据库系统概述\n\n数据库的基本概念\n数据管理的发展过程\n数据库系统的特点\n\n2.数据模型\n\n数据模型的三要素\n三种主要数据库模型\n\n3.数据库系统内部的系统结构\n\n数据库系统三级模式结构\n数据库系统两层映像系统结构\n\n4.数据库系统的组成\n","categories":["数据库笔记"],"tags":["数据库"]},{"title":"第三章 关系数据库标准语言SQL","url":"/2021/10/26/%E7%AC%AC%E4%B8%89%E7%AB%A0-SQL/","content":"第三章 关系数据库标准语言SQL3.1 SQL概述SQL（Structured Query Language）结构化查询语言，是关系数据库的标准语言\nSQL是一个通用的、功能极强的关系数据库语言\n3.1.1  SQL 的产生与发展略\n※ 目前，没有一个数据库系统能够支持SQL标准的所有概念和特性\n3.1.2  SQL的特点1.综合统一\n集数据定义语言（DDL），数据操纵语言（DML），数据控制语言（DCL）功能于一体。\n可以独立完成数据库生命周期中的全部活动\n用户数据库投入运行后，可根据需要随时逐步修改模式，不影响数据库的运行。\n数据操作符统一\n\n2.高度非过程化\n非关系数据模型的数据操纵语言“面向过程”，必须指定存取路径。\nSQL只要提出“做什么”，无须了解存取路径。\n存取路径的选择以及SQL的操作过程由系统自动完成。\n\n3.面向集合的操作方式\n非关系数据模型采用面向记录的操作方式，操作对象是一条记录\n\nSQL采用集合操作方式\n\n操作对象、查找结果可以是元组的集合\n\n一次插入、删除、更新操作的对象可以是元组的集合\n\n\n\n\n4.以同一种语法结构提供多种使用方式\nSQL是独立的语言，能够独立地用于联机交互的使用方式\nSQL又是嵌入式语言，SQL能够嵌入到高级语言（例如C，C++，Java）程序中，供程序员设计程序时使用\n\n5.语言简洁，易学易用SQL功能极强，完成核心功能只用了9个动词。\n数据查询（SELECT），数据定义（CREATE，DROP，ALTER），数据操纵（INSERT，UPDATE，DELETE），数据控制（GRANT，REVOKE）。\n3.1.3  SQL的基本概念SQL支持关系数据库三级模式结构\n\n基本表\n\n本身独立存在的表\nSQL中一个关系就对应一个基本表\n一个（或多个）基本表对应一个存储文件\n一个表可以带若干索引\n\n存储文件\n\n逻辑结构组成了关系数据库的内模式\n物理结构对用户是隐蔽的\n\n视图\n\n从一个或几个基本表导出的表\n数据库中只存放视图的定义而不存放视图对应的数据\n视图是一个虚表\n用户可以在视图上再定义视图\n\n3.2 学生-课程数据库学生-课程模式 S-T :   \n学生表：Student(Sno,Sname,Ssex,Sage,Sdept)，其中Sno为主键\n课程表：Course(Cno,Cname,Cpno,Ccredit)，其中Cno为主键\n学生选课表：SC(Sno,Cno,Grade)，其中（Sno，Cno）为主键\n\n\n\n学号 Sno\n姓名 Sname\n性别 Ssex\n年龄 Sage\n所在系 Sdept\n\n\n\n201215121\n李勇\n男\n20\nCS\n\n\n201215122\n刘晨\n女\n19\nCS\n\n\n201215123\n王敏\n女\n18\nMA\n\n\n201215125\n张立\n男\n19\nIS\n\n\n\n\n\n课程号 Cno\n课程名 Cname\n先行课 Cpno\n学分 Ccredit\n\n\n\n1\n数据库\n5\n4\n\n\n2\n数学\n\n2\n\n\n3\n信息系统\n1\n4\n\n\n4\n操作系统\n6\n3\n\n\n5\n数据结构\n7\n4\n\n\n6\n数据处理\n\n2\n\n\n7\nPASCAL语言\n6\n4\n\n\n\n\n\n学 号 Sno\n课程号 Cno\n成绩  Grade\n\n\n\n201215121\n1\n92\n\n\n201215121\n2\n85\n\n\n201215121\n3\n88\n\n\n201215122\n2\n90\n\n\n201215122\n3\n80\n\n\n3.3 数据定义SQL的数据定义功能: 模式定义，表定义，视图和索引的定义 。\n\n\n现代关系数据库管理系统提供了一个层次化的数据库对象命名机制\n\n一个关系数据库管理系统的实例（Instance）中可以建立多个数据库\n一个数据库中可以建立多个模式\n一个模式下通常包括多个表、视图和索引等数据库对象\n\n3.3.1  模式的定义与删除1.定义模式定义模式实际上定义一个命空间\n在这个空间中可以定义该模式包含的数据库对象，例如基本表、视图、索引等。\n在CREATE SCHEMA中可以接受CREATE TABLE，CREATE VIEW和GRANT子句。\nCREATE SCHEMA&lt;模式名&gt;AUTHORIZATION&lt;用户名&gt;[&lt;表定义子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;\n※ 如果没有明确模式名，则模式名与用户名相同。\n2.删除模式DROP SCHEMA &lt;模式名&gt; &lt;CASCADE|RESTRICT&gt;\nCASCADE（级联）\n\n删除模式的同时把该模式中所有的数据库对象全部删除\n\nRESTRICT（限制）\n\n如果该模式中定义了下属的数据库对象（如表、视图等），则拒绝该删除语句的执行。\n仅当该模式中没有任何下属的对象时才能执行。\n\n3.3.2基本表的定义、删除与修改定义基本表CREATE TABLE &lt;表名&gt;\n(&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt; ]\n[,&lt;列名&gt; &lt;数据类型&gt;[ &lt;列级完整性约束条件&gt;] ] \n…\n[,&lt;表级完整性约束条件&gt; ] );\n\n&lt;表名&gt;：所要定义的基本表的名字\n&lt;列名&gt;：组成该表的各个属性（列）\n&lt;列级完整性约束条件&gt;：涉及相应属性列的完整性约束条件\n&lt;表级完整性约束条件&gt;：涉及一个或多个属性列的完整性约束条件 \n\n如果完整性约束条件涉及到该表的多个属性列，则必须定义在表级上，否则既可以定义在列级也可以定义在表级。 \n\n\n\n列级约束条件\n含义\n\n\n\nPRIMARY KEY\n主码\n\n\nUNIQUE\n取唯一值\n\n\nNOT UNLL\n不为空\n\n\n\n\n\n表级约条件\n含义\n\n\n\nFOREIGN KEY（A）REFERENCES B（C）\nA是外码，参照表是B，被参照列是C\n\n\nPRIMARY KEY（A，B，……）\n主码由多个属性构成，必须作为表级完整性进行定义\n\n\n\n\n\n\n数据类型\nSQL中域的概念用数据类型来实现\n定义表的属性时需要指明其数据类型及长度 \n选用哪种数据类型 （取值范围 ，要做哪些运算） \n\n\n\n数据类型\n含义\n\n\n\nCHAR(n),CHARACTER(n)\n长度为n的定长字符串\n\n\nVARCHAR(n), CHARACTERVARYING(n)\n最大长度为n的变长字符串\n\n\nCLOB\n字符串大对象\n\n\nBLOB\n二进制大对象\n\n\nINT，INTEGER\n长整数（4字节）\n\n\nSMALLINT\n短整数（2字节）\n\n\nBIGINT\n大整数（8字节）\n\n\nNUMERIC(p，d)\n定点数，由p位数字（不包括符号、小数点）组成，小数后面有d位数字\n\n\nDECIMAL(p, d), DEC(p, d)\n同NUMERIC\n\n\nREAL\n取决于机器精度的单精度浮点数\n\n\nDOUBLE PRECISION\n取决于机器精度的双精度浮点数\n\n\nFLOAT(n)\n可选精度的浮点数，精度至少为n位数字\n\n\nBOOLEAN\n逻辑布尔量\n\n\nDATE\n日期，包含年、月、日，格式为YYYY-MM-DD\n\n\nTIME\n时间，包含一日的时、分、秒，格式为HH:MM:SS\n\n\nTIMESTAMP\n时间戳类型\n\n\nINTERVAL\n时间间隔类型\n\n\n每一个基本表都属于某一个模式\n一个模式包含多个基本表\n定义基本表所属模式\n\n方法一：在表名中明显地给出模式名Create table&quot;S-T&quot;.Student(......);     /*模式名为 S-T*/` Create table &quot;S-T&quot;.Cource(......); Create table &quot;S-T&quot;.SC(......); \n方法二：在创建模式语句中同时创建表 \n方法三：设置所属的模式 \n\n创建基本表（其他数据库对象也一样）时，若没有指定模式，系统根据搜索路径来确定该对象所属的模式 \n关系数据库管理系统会使用模式列表中第一个存在的模式作为数据库对象的模式名 \n若搜索路径中的模式名都不存在，系统将给出错误 \n\n显示当前的搜索路径： SHOW search_path; \n搜索路径的当前默认值是：$user， PUBLIC \n\n3.3.3 索引的建立与删除3.4 数据查询3.5 数据更新3.6 空值的处理3.7 视图3.8 小结"},{"title":"第二章 关系数据库","url":"/2021/09/23/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"第二章 关系数据库2.1  关系数据结构及形式化定义2.1.1  关系单一的数据结构—-关系\n​    现实世界的实体以及实体间的各种联系均用关系来表示\n逻辑结构—-二维表 \n​    从用户角度，关系模型中数据的逻辑结构是一张二维表\n建立在集合代数的基础上 \n1.域域是一组具有相同数据类型的值的集合。\n域可以是有限集，也可以是无限集。\n如果域D为有限集，则称D中元素的个数为D的基数，记作|D|。\n2.笛卡尔积\n元组：笛卡尔积中每一个元素（d1，d2，…，dn）叫作一个n元组（n-tuple）或简称元组\n分量：笛卡尔积元素（d1，d2，…，dn）中的每一个值di 叫作一个分量\n基数：若Di（i＝1，2，…，n）为有限集，其基数为mi（i＝1，2，…，n），则D1×D2×…×Dn的基数M为：|D1|×|D2|×……×|Dn|。\n\n3.关系（1）关系D1×D2×…×Dn的子集叫作在域D1，D2，…，Dn上的关系，表示为 R（D1，D2，…，Dn）\n其中R为关系名，n为关系的目或度。\n（2）元组关系中的每个元素是关系中的元组，通常用t表示。\n（3）单元关系与二元关系当n=1时，称该关系为单元关系（Unary relation） 或一元关系\n当n=2时，称该关系为二元关系（Binary relation）\n（4）关系的表示关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域\n（5）属性关系中不同列可以对应相同的域\n为了加以区分，必须对每列起一个名字，称为属性（Attribute）\nn目关系必有n个属性\n（6）码候选码：若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选码\n\n简单的情况：候选码只包含一个属性\n复杂的情况：包含两个以上属性 \n\n全码：最极端的情况：关系模式的所有属性组是这个关系模式的候选码，称为全码（All-key）\n主码：若一个关系有多个候选码，则选定其中一个为主码（Primary key）\n主属性：候选码的诸属性称为主属性（Prime attribute）\n​    不包含在任何侯选码中的属性称为非主属性（Non-Prime attribute）或非码属性（Non-key attribute） \n（7）三类关系基本关系（基本表或基表）：实际存在的表，是实际存储数据的逻辑表示\n查询表：查询结果对应的表\n视图表：由基本表或其他视图表导出的表，是虚表，不对应实际存储的数据\n（8）基本关系的性质① 列是同质的（Homogeneous）\n② 不同的列可出自同一个域\n\n其中的每一列称为一个属性\n不同的属性要给予不同的属性名\n\n③ 列的顺序无所谓，列的次序可以任意交换\n④ 任意两个元组的候选码不能相同\n⑤ 行的顺序无所谓，行的次序可以任意交换\n⑥ 分量必须取原子值，这是规范条件中最基本的一条\n2.1.2  关系模式关系模型是型\n关系是值\n\n关系模式是对关系的描述\n\n元组集合的结构（属性构成，属性来自的域，属性与域之间的映象关系）\n完整性约束条件\n\n关系模式可以形式化地表示为： R（U，D，DOM，F）\n※ 其中R为关系名，U为组成该关系的属性名集合，D为U中属性所来自的域，DOM为属性向域的映像集合，F为属性间数据的依赖关系的集合。\n关系模式通常可以简记为：R（U）或R（A1，A2，A3……An）\n※ 其中An为属性名，域名及属性向域的映象常常直接说明为属性的类型、长度\n\n\n\n关系模式\n关系\n\n\n\n对关系的描述\n关系模式在某一时刻的状态或内容\n\n\n静态的、稳定的\n动态的、随时间不断变化的\n\n\n※ 关系模式和关系往往笼统称为关系，需通过上下文加以区别\n2.1.3  关系数据库在一个给定的应用领域中，所有关系的集合构成一个关系数据库\n关系数据库的型: 关系数据库模式，是对关系数据库的描述\n关系数据库的值: 关系模式在某一时刻对应的关系的集合，通常称为关系数据库\n2.1.4   关系模型的存储结构有的关系数据库管理系统中一个表对应一个操作系统文件，将物理数据组织交给操作系统完成\n有的关系数据库管理系统从操作系统那里申请若干个大的文件，自己划分文件空间，组织表、索引等存储结构，并进行存储管理\n2.2  关系操作常见的关系操作：\n\n查询操作：选择、投影、连接、除、并、差、交、笛卡尔积（其中选择、投影、并、差、笛卡尔积是五种基本操作）\n数据更新：插入、删除、修改\n\n关系操作的特点：\n集合操作方式：操作的对象和结果都是集合，一次一集合的方式。\n关系代数语言：用对关系的运算来表达查询要求（代表 ISBL）\n关系演算语言：用谓词来表达查询要求\n\n元组关系演算语言：谓词变元的基本对象是元组变量（代表 APLHA,QUEL）\n域关系演算语言：谓词变元的基本对象是域变量（代表 QBE）\n\n具有关系代数和关系演算双重特点的语言（代表 SQL）\n2.3  关系的完整性2.3.1 实体完整性实体完整性规则（Entity Integrity）：若属性A是基本关系R的主属性，则属性A不能取空值\n※ 空值就是“不知道”或“不存在”或“无意义”的值\n实体完整性规则的说明\n\n实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集。\n现实世界中的实体是可区分的，即它们具有某种唯一性标识。\n关系模型中以主码作为唯一性标识。\n主码中的属性即主属性不能取空值。主属性取空值，就说明存在某个不可标识的实体，即存在不可区分的实体，这与第（2）点相矛盾，因此这个规则称为实体完整性。\n\n2.3.2 参照完整性1.关系间的引用在关系模型中实体及实体间的联系都是用关系来描述的，自然存在着关系与关系间的引用。\n\n2. 外码设F是基本关系R的一个或一组属性，但不是关系R的码。如果F与基本关系S的主码Ks相对应，则称F是R的外码\n基本关系R称为参照关系（Referencing  Relation）\n基本关系S称为被参照关系（Referenced Relation）或目标关系（Target Relation）\n\n\n\n关系R和S不一定是不同的关系\n目标关系S的主码Ks 和参照关系的外码F须定义在同一个（或一组）域上\n外码并不一定要与相应的主码同名       当外码与相应的主码属于不同关系时，往往取相同的名 字，以便于识别\n3.参考完整性规则参考完整性规则：若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为：\n\n或者取空值（F的每个属性值均为空值）\n或者等于S中某个元组的主码值\n\n\n\n\n2.3.3 用户定义的完整性针对某一具体关系数据库的约束条件，反映某一具体应用所涉及的数据必须满足的语义要求\n关系模型应提供定义和检验这类完整性的机制，以便用统一的系统的方法处理它们，而不需由应用程序承担这一功能\n\n2.4  关系代数关系代数是一种抽象的查询语言，它用对关系的运算来表达查询\n关系代数的运算对象是关系，运算结果亦为关系\n关系代数的运算符有两类：集合运算符和专门的关系运算符\n传统的集合运算是从关系的“水平”方向即行的角度进行\n专门的关系运算不仅涉及行而且涉及列\n\n2.4.1 传统的集合运算（1）并：略（2）差：略（3）交：略（4）笛卡儿积：严格地讲应该是广义的笛卡尔积（Extended Cartesian Product） \nR: n目关系，k1个元组，S: m目关系，k2个元组\n\n\n2.4.2 专门的关系运算先引入几个记号 \n\n\n\n\n2.5  *关系演算2.6  小结","tags":["数据库，笔记"]}]